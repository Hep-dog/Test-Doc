# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Detector

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class EventData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEventData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = EventData()
        x.Init(buf, n + offset)
        return x

    # EventData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # EventData
    def PulseId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # EventData
    def Tof(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventData
    def TofAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # EventData
    def TofLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventData
    def TofIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # EventData
    def Pos(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # EventData
    def PosAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # EventData
    def PosLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # EventData
    def PosIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def EventDataStart(builder): builder.StartObject(3)
def EventDataAddPulseId(builder, pulseId): builder.PrependUint64Slot(0, pulseId, 0)
def EventDataAddTof(builder, tof): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(tof), 0)
def EventDataStartTofVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EventDataAddPos(builder, pos): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)
def EventDataStartPosVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EventDataEnd(builder): return builder.EndObject()
